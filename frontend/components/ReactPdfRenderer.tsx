'use client';

import React, { useState, useEffect } from 'react';
import { 
  Document, Page, View, Image, Text, 
  PDFDownloadLink, PDFViewer, StyleSheet 
} from '@react-pdf/renderer';

interface ImageData {
  url: string;
  name: string;
}

interface ReactPdfRendererProps {
  images: File[];
  outputFilename: string;
  showPreview?: boolean;
}

const styles = StyleSheet.create({
  page: {
    padding: 30,
    backgroundColor: '#ffffff',
  },
  header: {
    marginBottom: 20,
    textAlign: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 12,
    color: '#555555',
    marginBottom: 20,
  },
  imageContainer: {
    marginBottom: 20,
  },
  image: {
    maxWidth: '100%',
    maxHeight: 700,
    objectFit: 'contain',
    marginBottom: 10,
  },
  caption: {
    fontSize: 10,
    color: '#666666',
    marginBottom: 5,
    textAlign: 'center',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    fontSize: 10,
    color: '#666666',
    textAlign: 'center',
  },
  pageNumber: {
    position: 'absolute',
    bottom: 30,
    right: 30,
    fontSize: 10,
    color: '#666666',
  },
});

const ImageDocument = ({ images, outputFilename }: { images: ImageData[], outputFilename: string }) => (
  <Document title={outputFilename}>
    <Page size="A4" style={styles.page}>
      <View style={styles.header}>
        <Text style={styles.title}>Image Collection</Text>
        <Text style={styles.subtitle}>Generated by AGAM Document Converter</Text>
      </View>
      
      {images.map((image, index) => (
        <View key={index} style={styles.imageContainer} break={index > 0}>
          <Image src={image.url} style={styles.image} />
          <Text style={styles.caption}>{image.name}</Text>
        </View>
      ))}
      
      <Text style={styles.footer}>
        Created with AGAM Document Converter
      </Text>
      <Text style={styles.pageNumber} render={({ pageNumber, totalPages }) => (
        `${pageNumber} / ${totalPages}`
      )} fixed />
    </Page>
  </Document>
);

export default function ReactPdfRenderer({ images, outputFilename, showPreview = false }: ReactPdfRendererProps) {
  const [imageData, setImageData] = useState<ImageData[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  
  useEffect(() => {
    // Convert File objects to URLs for react-pdf
    const loadImages = async () => {
      setLoading(true);
      
      const imageUrls = images.map(image => ({
        url: URL.createObjectURL(image),
        name: image.name
      }));
      
      setImageData(imageUrls);
      setLoading(false);
    };
    
    loadImages();
    
    // Cleanup function to revoke object URLs
    return () => {
      imageData.forEach(image => URL.revokeObjectURL(image.url));
    };
  }, [images]);
  
  if (loading) {
    return <div className="text-center p-4">Loading images...</div>;
  }
  
  return (
    <div>
      {showPreview && (
        <div className="mb-4">
          <h3 className="text-lg font-medium mb-2 text-gray-700">PDF Preview</h3>
          <PDFViewer width="100%" height={500} className="border rounded">
            <ImageDocument images={imageData} outputFilename={outputFilename} />
          </PDFViewer>
        </div>
      )}
      
      <PDFDownloadLink 
        document={<ImageDocument images={imageData} outputFilename={outputFilename} />} 
        fileName={`${outputFilename}.pdf`}
        className="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 w-full"
      >
        {({ blob, url, loading, error }) => 
          loading ? 'Generating PDF...' : 'Download PDF'
        }
      </PDFDownloadLink>
    </div>
  );
} 